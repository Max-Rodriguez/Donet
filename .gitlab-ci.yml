include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  TYPOS_UPSTREAM: "https://github.com/crate-ci/typos/releases/download/v1.22.7/typos-v1.22.7-x86_64-unknown-linux-musl.tar.gz"
  CODECOV_CLI_UPSTREAM: "https://cli.codecov.io/latest/alpine/codecov"
  GCP_PROJECT_NUMBER: 196424286082
  GCP_WORKLOAD_IDENTITY_FEDERATION_POOL_ID: "donet-gitlab-ci-pool" # IAM WIF Pool
  GCP_WORKLOAD_IDENTITY_FEDERATION_PROVIDER_ID: "donet-gitlab-ci-provider" # Provider from Pool
  GCP_CODECOV_TOKEN_SECRET_NAME: "CODECOV_TOKEN" # This is the name of the secret defined in GCP Secret Manager
  GCP_GIT_ACCESS_KEY_SECRET_NAME: "GIT_ACCESS_KEY"

stages:
  - check
  - build
  - test
  - deploy

.install-meson: &install-meson
  # Install Meson build system
  - apt-get update
  - apt-get install -y meson

sync-mirror:
  image: alpine
  stage: check
  allow_failure: true
  retry: 2
  interruptible: true
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "master")
  id_tokens:
    GCP_ID_TOKEN:
      # Must match the audience defined in the WIF Identity Pool!
      aud: https://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_FEDERATION_POOL_ID}/providers/${GCP_WORKLOAD_IDENTITY_FEDERATION_PROVIDER_ID}
  secrets:
    SSH_PRIVATE_KEY:
      gcp_secret_manager:
        name: $GCP_GIT_ACCESS_KEY_SECRET_NAME
        version: 1
      file: false
      token: $GCP_ID_TOKEN
  variables:
    MIRROR_HOST: "github.com"
    ORGANIZATION_NAME: "donet-server"
    PROJECT_NAME: "donet"
  script:
    - apk add --no-cache git openssh
    # Setup SSH key for mirror push access
    - mkdir ~/.ssh
    - echo "-----BEGIN OPENSSH PRIVATE KEY-----" > ~/.ssh/privatekey
    - echo ${SSH_PRIVATE_KEY} >> ~/.ssh/privatekey
    - echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/privatekey
    - chmod 600 ~/.ssh/privatekey
    # Setup known hosts beforehand to avoid interactive prompt
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan ${MIRROR_HOST} >> ~/.ssh/known_hosts
    # Clone repository and push to mirror remote
    - git clone --mirror https://gitlab.com/${ORGANIZATION_NAME}/${PROJECT_NAME}.git/
    - cd ${PROJECT_NAME}.git
    - ssh-agent sh -c 'ssh-add ~/.ssh/privatekey; git push -v --mirror git@github.com:${ORGANIZATION_NAME}/${PROJECT_NAME}'

commit-validation:
  image: 'python:3.12-alpine'
  stage: check
  interruptible: true
  script:
    - python build-aux/validate-commit.py "${CI_COMMIT_TITLE}"

typos:
  image: alpine
  stage: check
  interruptible: true
  script:
    - apk add --no-cache wget tar
    - wget ${TYPOS_UPSTREAM}
    - mkdir .tmp
    - tar -xzf typos-v*.tar.gz -C .tmp/
    - ./.tmp/typos

cargo-deny:
  image: rust
  stage: check
  allow_failure: true
  interruptible: true
  cache:
    key: meson-cache-deny-$CI_COMMIT_BRANCH
    paths:
      - build
    when: 'always'
  script:
    - *install-meson
    - meson setup build -Dprofile=debug
    - meson compile deny -C build

cargo-fmt:
  image: 'rust:slim'
  stage: check
  interruptible: true
  script:
    - rustup component add rustfmt
    # Create blank versions of our Meson-configured files
    # so rustfmt does not yell about non-existent files or completely empty files
    - echo -e "" >> donet/src/meson.rs
    - rustc -Vv && cargo -Vv
    - cargo fmt --version
    - cargo fmt --all -- --color=always --check

build:
  image: rust
  stage: build
  interruptible: true
  cache:
    key: meson-cache-build-$CI_COMMIT_BRANCH
    paths:
      - build
    when: 'always'
  script:
    - *install-meson
    - rustup component add clippy rustfmt
    # Compile source and run code linting
    - meson setup build -Dprofile=debug
    - meson compile -C build
    - meson compile linting -C build

unit-testing:
  image: rust
  stage: build
  interruptible: true
  cache:
    key: meson-cache-testing-$CI_COMMIT_BRANCH
    paths:
      - build
    when: 'always'
  script:
    - *install-meson
    # Run unit tests
    - meson setup build -Dprofile=debug
    - meson compile tests -C build

cargo-doc:
  image: rust
  stage: build
  interruptible: true
  cache:
    key: meson-cache-doc-$CI_COMMIT_BRANCH
    paths:
      - build
    when: 'always'
  artifacts:
    expire_in: 1 week
    name: 'Library Documentation'
    paths:
      - doc
  script:
    - *install-meson
    - meson setup build -Dprofile=debug
    - meson compile cargo-doc -C build
    - mkdir doc
    - cp -r build/target/doc doc
    - chmod -R a=rwx doc

sast:
  stage: test

cargo-tarpaulin:
  image: rust
  stage: test
  dependencies:
    - unit-testing
  cache:
    key: meson-cache-tarpaulin-$CI_COMMIT_BRANCH
    paths:
      - build
    when: 'always'
  artifacts:
    expire_in: 1 week
    name: 'Code Coverage'
    paths:
      - tarpaulin
  script:
    - *install-meson
    - meson setup build -Dprofile=debug
    - meson compile code-coverage -C build
    - mkdir tarpaulin
    - chmod -R a=rwx tarpaulin
    # Copy artifacts to tarpaulin folder (coverage.json, cobertura.xml)
    - cp -r build/target/tarpaulin tarpaulin

codecov-upload:
  image: alpine
  stage: deploy
  dependencies:
    - cargo-tarpaulin
  allow_failure: true
  retry: 2
  interruptible: true
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "master")
  id_tokens:
    GCP_ID_TOKEN:
      # Must match the audience defined in the WIF Identity Pool!
      aud: https://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_FEDERATION_POOL_ID}/providers/${GCP_WORKLOAD_IDENTITY_FEDERATION_PROVIDER_ID}
  secrets:
    CODECOV_TOKEN:
      gcp_secret_manager:
        name: $GCP_CODECOV_TOKEN_SECRET_NAME
        version: 1
      file: false
      token: $GCP_ID_TOKEN
  script:
    - apk add --no-cache curl gnupg
    # Download Codecov CLI
    - curl -O ${CODECOV_CLI_UPSTREAM}
    # Integrity check
    - curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
    # Print out updated GPG keyring
    - gpg --keyring trustedkeys.gpg --list-keys
    # Download sha256sum and signed hash sum
    - curl -O ${CODECOV_CLI_UPSTREAM}.SHA256SUM
    - curl -O ${CODECOV_CLI_UPSTREAM}.SHA256SUM.sig
    - gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
    # Verify hash sum and test
    - sha256sum -c codecov.SHA256SUM
    - chmod +x codecov
    - ./codecov --version
    # Upload cargo-tarpaulin artifacts to codecov.io
    - ./codecov -v upload-process --dir tarpaulin --git-service gitlab -t ${CODECOV_TOKEN}

pages:
  stage: deploy
  dependencies:
    - cargo-doc
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "master")
  artifacts:
    expire_in: 1 week
    paths:
      # GitLab Pages only deploys page under "public" directory.
      - public
  script:
    - mkdir public
    - mv doc/* public
    - cd public
    # Make an index.html file in the `public/` dir to reroute to
    # the `libdonet` subdirectory where the actual documentation is at.
    # This makes the user not encounter a 404 at the root of the pages site.
    - touch index.html
    - echo "<meta http-equiv=\"refresh\" content=\"0; url=libdonet\">" > index.html
